<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳照常升起博客</title>
  
  <subtitle>莫听穿林打叶声，何妨吟啸且徐行</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-14T16:06:56.284Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>太阳照常升起</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="http://example.com/2021/09/14/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2021/09/14/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-09-14T15:39:28.473Z</published>
    <updated>2021-09-14T16:06:56.284Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到太阳照常升起的博客，这篇文章是关于IDEA常用快捷键，方便学习操作。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="1、软件通用的快捷键"><a href="#1、软件通用的快捷键" class="headerlink" title="1、软件通用的快捷键"></a>1、软件通用的快捷键</h2><ul><li>保存：Ctrl + S</li><li>剪切：Ctrl + X</li><li>粘贴：Ctrl + V</li><li>复制：Ctrl + C</li><li>全选：Ctlr + A</li><li>撤销：Ctrl + Z</li></ul><h2 id="2、IDEA常用快捷键"><a href="#2、IDEA常用快捷键" class="headerlink" title="2、IDEA常用快捷键"></a>2、IDEA常用快捷键</h2><h3 id="（1）提高代码编写速度"><a href="#（1）提高代码编写速度" class="headerlink" title="（1）提高代码编写速度"></a>（1）提高代码编写速度</h3><ul><li>智能提示：Alt + 回车</li><li>自动代码<ul><li>自动补全函数括号、分号、当前行缩进：Ctrl + Shift + 回车</li><li>提示代码模板：Ctrl + J</li><li>使用xx块环绕：Ctrl + Alt + T</li><li>自动生成构造器、get/set：Alt + Insert  （有的键盘需要同时按Fn键）</li><li>由方法自动生成返回值变量：Ctrl + Alt + V</li></ul></li><li>格式化代码：Ctrl + Alt + L</li><li>插入空行开始编辑<ul><li>在当前光标下一行插入空行开始编辑：Shift + 回车</li><li>在当前光标上一行插入空行开始编辑：Ctrl+Alt+回车</li></ul></li><li>移动代码<ul><li>向上移动代码：Ctrl+Shift + ↑  （整个方法移动）或  Alt + Shift + ↑（逐行移动）</li><li>向下移动代码：Ctrl+Shift + ↓ （整个方法移动） 或  Alt + Shift + ↓（逐行移动）</li></ul></li><li>复制行：Ctrl+D</li><li>删除行<ul><li>Ctrl + Y</li><li>不选中删除光标所在行：Ctrl + X</li></ul></li><li>重命名类、变量、方法等：选择要重名的元素，按Shift + F6</li><li>抽取代码重构方法：Ctrl + Alt + M</li><li>查看所调用方法的形参列表提醒：Ctrl + P</li><li>重写或实现方法<ul><li>实现接口的方法：Ctrl + i</li><li>重写父类的方法：Ctrl + O</li></ul></li><li>注释<ul><li>单行注释：Ctrl + /</li><li>多行注释：Ctrl + Shift + /</li></ul></li><li>转大小写：Ctrl +Shift + U</li></ul><h3 id="（2）移动光标定位"><a href="#（2）移动光标定位" class="headerlink" title="（2）移动光标定位"></a>（2）移动光标定位</h3><ul><li>移动定位<ul><li>跳转到上一个/下一个位置编辑位置：Ctrl + Alt + 左/右键</li><li>跳转到上一个/下一个方法位置： Alt + 上/下键</li><li>打开的类文件之间切换： Alt + 左/右键</li><li>定位某行：Ctrl + G</li></ul></li><li>选择文本：Ctrl + W<ul><li>按一下选择单词，再按选择语句，再按选择行，再按选择方法</li></ul></li></ul><h3 id="（3）查找与查看源码"><a href="#（3）查找与查看源码" class="headerlink" title="（3）查找与查看源码"></a>（3）查找与查看源码</h3><ul><li>按住Ctrl键，单击某个类或方法就可以打开某个类或方法的源码<ul><li>但是当某个变量是通过多态引用调用父类或父接口的方法时，想要打开方法的实现类：Ctrl +Alt +B</li></ul></li><li>查看方法文档：选中方法名后按Ctrl + Q</li><li>查看某个类的结构信息<ul><li>类的继承层次：Ctrl + H</li><li>类的UML关系图：Ctrl + Alt + U</li><li>当前文件结构：Ctrl + F12键</li></ul></li><li>搜索<ul><li>搜索类：Ctrl + N</li><li>全项目搜索文本：Ctrl + Shift + F</li><li>全项目替换文本：Ctrl +Shift + R</li><li>当前源文件查找文本：Ctrl + F</li><li>当前源文件替换问题：Ctrl + R</li><li>任何地方搜索：双击Shift</li></ul></li><li>折叠与展开<ul><li>折叠方法实现：Ctrl + Shift +  -</li><li>展开方法实现：Ctrl +Shift + +</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到太阳照常升起的博客，这篇文章是关于IDEA常用快捷键，方便学习操作。&lt;/p&gt;
&lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;h2 id=&quot;1、软件通用的快捷键&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码范例</title>
    <link href="http://example.com/2021/09/14/%E4%BB%A3%E7%A0%81%E8%8C%83%E4%BE%8B/"/>
    <id>http://example.com/2021/09/14/%E4%BB%A3%E7%A0%81%E8%8C%83%E4%BE%8B/</id>
    <published>2021-09-14T15:32:08.667Z</published>
    <updated>2021-09-14T16:06:29.616Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到太阳照常升起的博客，这篇文章是关于代码方面的内容，方便学习操作。</p><h1 id="redis连接代码范例"><a href="#redis连接代码范例" class="headerlink" title="redis连接代码范例"></a>redis连接代码范例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> public static JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">private static void initJedisPool() &#123;</span><br><span class="line">    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();</span><br><span class="line">    //最大连接数</span><br><span class="line">    jedisPoolConfig.setMaxTotal(100);</span><br><span class="line">    //最小空闲连接</span><br><span class="line">    jedisPoolConfig.setMinIdle(5);</span><br><span class="line">    //最大空闲连接</span><br><span class="line">    jedisPoolConfig.setMaxIdle(5);</span><br><span class="line">    //连接耗尽是否等待</span><br><span class="line">    jedisPoolConfig.setBlockWhenExhausted(true);</span><br><span class="line">    //等待时间</span><br><span class="line">    jedisPoolConfig.setMaxWaitMillis(2000);</span><br><span class="line">    //每次连接的时候是否进行测试</span><br><span class="line">    jedisPoolConfig.setTestOnBorrow(true);</span><br><span class="line"></span><br><span class="line">​    jedisPool=new JedisPool(jedisPoolConfig,&quot;hadoop102&quot;,6379,10000);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Jedis getJedis()&#123;</span><br><span class="line">    if(jedisPool == null)&#123;</span><br><span class="line">        initJedisPool();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;--获取Redis连接--&quot;);</span><br><span class="line"></span><br><span class="line">​    Jedis jedis = jedisPool.getResource();</span><br><span class="line">​    return jedis;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    String ping = jedis.ping();</span><br><span class="line">    System.out.println(ping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程池代码范例"><a href="#线程池代码范例" class="headerlink" title="线程池代码范例"></a>线程池代码范例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   private static ThreadPoolExecutor pool;</span><br><span class="line"></span><br><span class="line">public  static ThreadPoolExecutor getInstance() &#123;</span><br><span class="line">    if (pool == null) &#123;</span><br><span class="line">        synchronized (ThreadPoolExecutor.class) &#123;</span><br><span class="line">            if (pool == null) &#123;</span><br><span class="line">                System.out.println(&quot;---开辟线程池---&quot;);</span><br><span class="line">                pool = new ThreadPoolExecutor(</span><br><span class="line">                        4,//指定了线程池中的线程数量</span><br><span class="line">                        20,//:指定了线程池中的最大线程数量</span><br><span class="line">                        60,//当线程池中空闲线程数量超过corePoolSize时，多余的线程的存活时间；</span><br><span class="line">                        TimeUnit.SECONDS,//keepAliveTime的单位</span><br><span class="line">                        new LinkedBlockingDeque&lt;Runnable&gt;(Integer.MAX_VALUE)//任务队列</span><br><span class="line"></span><br><span class="line">​                );</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    return pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步IO代码范例"><a href="#异步IO代码范例" class="headerlink" title="异步IO代码范例"></a>异步IO代码范例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">- 异步IO进</span><br><span class="line"></span><br><span class="line">- 模板方法设计模式</span><br><span class="line"></span><br><span class="line">- 在父类中定义实现某一个功能的核心算法的骨架，具体的实现延迟到子类中去完成</span><br><span class="line"></span><br><span class="line">- 这样每一个子类在不修改核心算法骨架的前提下，都可以有不同的实现方式</span><br><span class="line"></span><br><span class="line">- @param &lt;T&gt;</span><br><span class="line">  */</span><br><span class="line">  public abstract class DimAsyncFunction&lt;T&gt; extends RichAsyncFunction&lt;T, T&gt; implements DimJoinFunction&lt;T&gt;&#123;</span><br><span class="line">  private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">  private String tableName;</span><br><span class="line"></span><br><span class="line">  public DimAsyncFunction(String tableName) &#123;</span><br><span class="line">      this.tableName = tableName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void open(Configuration parameters) throws Exception &#123;</span><br><span class="line">      executorService= ThreadPoolUtil.getInstance();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void asyncInvoke( T input,  ResultFuture&lt;T&gt; resultFuture) &#123;</span><br><span class="line">      //开启多线程，处理流中的数据</span><br><span class="line">      executorService.submit(</span><br><span class="line">              new Runnable() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public void run() &#123;</span><br><span class="line">                      try &#123;</span><br><span class="line">                          long start =System.currentTimeMillis();</span><br><span class="line">                          //获取维度key</span><br><span class="line">                          String key = getKey(input);</span><br><span class="line">                          //根据维度key获取维度对象</span><br><span class="line">                          JSONObject dimInfo = DimUtil.getDimInfo(tableName, key);</span><br><span class="line">                          if(dimInfo !=null) &#123;</span><br><span class="line">                              //将维度数据和流中的数据进行关联</span><br><span class="line">                              join(input, dimInfo);</span><br><span class="line">                          &#125;</span><br><span class="line">                          long end =System.currentTimeMillis();</span><br><span class="line">                          System.out.println(&quot;异步查询耗时：&quot;+(end-start)+&quot;毫秒&quot;);</span><br><span class="line">                          //将维度关联后的对象  向下游传递</span><br><span class="line">                          resultFuture.complete(Collections.singleton(input));</span><br><span class="line">                      &#125; catch (Exception e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                          System.out.println(&quot;异步查询维度发生了异常&quot;);</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">  ​            &#125;</span><br><span class="line">  ​        &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="日期工具类代码范例"><a href="#日期工具类代码范例" class="headerlink" title="日期工具类代码范例"></a>日期工具类代码范例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  private static DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">//将字符串日期转换为时间戳</span><br><span class="line">public static Long getTs(String dateTime)&#123;</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.parse(dateTime,dtf);</span><br><span class="line">    Instant instant = localDateTime.toInstant(ZoneOffset.of(&quot;+8&quot;));</span><br><span class="line">    long ts = instant.toEpochMilli();</span><br><span class="line">    return ts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将日期对象转换为字符串日期</span><br><span class="line">public static String toYMDHms(Date date)&#123;</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());</span><br><span class="line">    String dateTime = dtf.format(localDateTime);</span><br><span class="line">    return dateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(ZoneId.systemDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="POJO类代码范例"><a href="#POJO类代码范例" class="headerlink" title="POJO类代码范例"></a>POJO类代码范例</h1><h2 id="自定义注解代码范例"><a href="#自定义注解代码范例" class="headerlink" title="自定义注解代码范例"></a>自定义注解代码范例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">- 自定义注解，用该注解标注的属性 不需要保存到clickhouse中</span><br><span class="line">  */</span><br><span class="line">  @Target(ElementType.FIELD)</span><br><span class="line">  @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">  public @interface TransientSink &#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="POJO类代码范例2"><a href="#POJO类代码范例2" class="headerlink" title="POJO类代码范例2"></a>POJO类代码范例2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">- Author: Felix</span><br><span class="line">- Desc: 关键词统计实体类</span><br><span class="line">  */</span><br><span class="line">  @Data</span><br><span class="line">  @AllArgsConstructor</span><br><span class="line">  @NoArgsConstructor</span><br><span class="line">  public class KeywordStats &#123;</span><br><span class="line">  private String keyword;</span><br><span class="line">  private Long ct;</span><br><span class="line">  private String source;</span><br><span class="line">  private String stt;</span><br><span class="line">  private String edt;</span><br><span class="line">  private Long ts;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="POJO类代码范例2-1"><a href="#POJO类代码范例2-1" class="headerlink" title="POJO类代码范例2"></a>POJO类代码范例2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class OrderWide &#123;</span><br><span class="line">    Long detail_id;</span><br><span class="line">    Long order_id ;</span><br><span class="line">    Long sku_id;</span><br><span class="line">    BigDecimal order_price ;</span><br><span class="line">    Long sku_num ;</span><br><span class="line">    String sku_name;</span><br><span class="line">    Long province_id;</span><br><span class="line">    String order_status;</span><br><span class="line">    Long user_id;</span><br><span class="line"></span><br><span class="line">BigDecimal total_amount;</span><br><span class="line">BigDecimal activity_reduce_amount;</span><br><span class="line">BigDecimal coupon_reduce_amount;</span><br><span class="line">BigDecimal original_total_amount;</span><br><span class="line">BigDecimal feight_fee;</span><br><span class="line">BigDecimal split_feight_fee;</span><br><span class="line">BigDecimal split_activity_amount;</span><br><span class="line">BigDecimal split_coupon_amount;</span><br><span class="line">BigDecimal split_total_amount;</span><br><span class="line"></span><br><span class="line">String expire_time;</span><br><span class="line">String create_time;</span><br><span class="line">String operate_time;</span><br><span class="line">String create_date; // 把其他字段处理得到</span><br><span class="line">String create_hour;</span><br><span class="line"></span><br><span class="line">String province_name;//查询维表得到</span><br><span class="line">String province_area_code;</span><br><span class="line">String province_iso_code;</span><br><span class="line">String province_3166_2_code;</span><br><span class="line"></span><br><span class="line">Integer user_age ;</span><br><span class="line">String user_gender;</span><br><span class="line"></span><br><span class="line">Long spu_id;     </span><br><span class="line">Long tm_id;</span><br><span class="line">Long category3_id;</span><br><span class="line">String spu_name;</span><br><span class="line">String tm_name;</span><br><span class="line">String category3_name;</span><br><span class="line"></span><br><span class="line">public OrderWide(OrderInfo orderInfo, OrderDetail orderDetail)&#123;</span><br><span class="line">    mergeOrderInfo(orderInfo);</span><br><span class="line">    mergeOrderDetail(orderDetail);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void  mergeOrderInfo(OrderInfo orderInfo  )  &#123;</span><br><span class="line">    if (orderInfo != null) &#123;</span><br><span class="line">        this.order_id = orderInfo.id;</span><br><span class="line">        this.order_status = orderInfo.order_status;</span><br><span class="line">        this.create_time = orderInfo.create_time;</span><br><span class="line">        this.create_date = orderInfo.create_date;</span><br><span class="line">        this.activity_reduce_amount = orderInfo.activity_reduce_amount;</span><br><span class="line">        this.coupon_reduce_amount = orderInfo.coupon_reduce_amount;</span><br><span class="line">        this.original_total_amount = orderInfo.original_total_amount;</span><br><span class="line">        this.feight_fee = orderInfo.feight_fee;</span><br><span class="line">        this.total_amount =  orderInfo.total_amount;</span><br><span class="line">        this.province_id = orderInfo.province_id;</span><br><span class="line">        this.user_id = orderInfo.user_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void mergeOrderDetail(OrderDetail orderDetail  )  &#123;</span><br><span class="line">    if (orderDetail != null) &#123;</span><br><span class="line">        this.detail_id = orderDetail.id;</span><br><span class="line">        this.sku_id = orderDetail.sku_id;</span><br><span class="line">        this.sku_name = orderDetail.sku_name;</span><br><span class="line">        this.order_price = orderDetail.order_price;</span><br><span class="line">        this.sku_num = orderDetail.sku_num;</span><br><span class="line">        this.split_activity_amount=orderDetail.split_activity_amount;</span><br><span class="line">        this.split_coupon_amount=orderDetail.split_coupon_amount;</span><br><span class="line">        this.split_total_amount=orderDetail.split_total_amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void mergeOtherOrderWide(OrderWide otherOrderWide)&#123;</span><br><span class="line">    this.order_status = ObjectUtils.firstNonNull( this.order_status ,otherOrderWide.order_status);</span><br><span class="line">    this.create_time =  ObjectUtils.firstNonNull(this.create_time,otherOrderWide.create_time);</span><br><span class="line">    this.create_date =  ObjectUtils.firstNonNull(this.create_date,otherOrderWide.create_date);</span><br><span class="line">    this.coupon_reduce_amount =  ObjectUtils.firstNonNull(this.coupon_reduce_amount,otherOrderWide.coupon_reduce_amount);</span><br><span class="line">    this.activity_reduce_amount =  ObjectUtils.firstNonNull(this.activity_reduce_amount,otherOrderWide.activity_reduce_amount);</span><br><span class="line">    this.original_total_amount =  ObjectUtils.firstNonNull(this.original_total_amount,otherOrderWide.original_total_amount);</span><br><span class="line">    this.feight_fee = ObjectUtils.firstNonNull( this.feight_fee,otherOrderWide.feight_fee);</span><br><span class="line">    this.total_amount =  ObjectUtils.firstNonNull( this.total_amount,otherOrderWide.total_amount);</span><br><span class="line">    this.user_id =  ObjectUtils.&lt;Long&gt;firstNonNull(this.user_id,otherOrderWide.user_id);</span><br><span class="line">    this.sku_id = ObjectUtils.firstNonNull( this.sku_id,otherOrderWide.sku_id);</span><br><span class="line">    this.sku_name =  ObjectUtils.firstNonNull(this.sku_name,otherOrderWide.sku_name);</span><br><span class="line">    this.order_price =  ObjectUtils.firstNonNull(this.order_price,otherOrderWide.order_price);</span><br><span class="line">    this.sku_num = ObjectUtils.firstNonNull( this.sku_num,otherOrderWide.sku_num);</span><br><span class="line">    this.split_activity_amount=ObjectUtils.firstNonNull(this.split_activity_amount);</span><br><span class="line">    this.split_coupon_amount=ObjectUtils.firstNonNull(this.split_coupon_amount);</span><br><span class="line">    this.split_total_amount=ObjectUtils.firstNonNull(this.split_total_amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造者建造模式代码范例"><a href="#构造者建造模式代码范例" class="headerlink" title="构造者建造模式代码范例"></a>构造者建造模式代码范例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">- @Builder注解</span><br><span class="line">- 可以使用构造者方式创建对象，给属性赋值</span><br><span class="line">- @Builder.Default</span><br><span class="line">- 在使用构造者方式给属性赋值的时候，属性的初始值会丢失</span><br><span class="line">- 该注解的作用就是修复这个问题</span><br><span class="line">- 例如：我们在属性上赋值了初始值为0L，如果不加这个注解，通过构造者创建的对象属性值会变为null</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">import lombok.Builder;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Builder</span><br><span class="line">public class ProductStats &#123;</span><br><span class="line"></span><br><span class="line">String stt;//窗口起始时间</span><br><span class="line">String edt;  //窗口结束时间</span><br><span class="line">Long sku_id; //sku编号</span><br><span class="line">String sku_name;//sku名称</span><br><span class="line">BigDecimal sku_price; //sku单价</span><br><span class="line">Long spu_id; //spu编号</span><br><span class="line">String spu_name;//spu名称</span><br><span class="line">Long tm_id; //品牌编号</span><br><span class="line">String tm_name;//品牌名称</span><br><span class="line">Long category3_id;//品类编号</span><br><span class="line">String category3_name;//品类名称</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long display_ct = 0L; //曝光数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long click_ct = 0L;  //点击数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long favor_ct = 0L; //收藏数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long cart_ct = 0L;  //添加购物车数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long order_sku_num = 0L; //下单商品个数</span><br><span class="line"></span><br><span class="line">@Builder.Default   //下单商品金额</span><br><span class="line">        BigDecimal order_amount = BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long order_ct = 0L; //订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default   //支付金额</span><br><span class="line">        BigDecimal payment_amount = BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long paid_order_ct = 0L;  //支付订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long refund_order_ct = 0L; //退款订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">BigDecimal refund_amount = BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long comment_ct = 0L;//评论订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">Long good_comment_ct = 0L; //好评订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">@TransientSink</span><br><span class="line">Set orderIdSet = new HashSet();  //用于统计订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">@TransientSink</span><br><span class="line">Set paidOrderIdSet = new HashSet(); //用于统计支付订单数</span><br><span class="line"></span><br><span class="line">@Builder.Default</span><br><span class="line">@TransientSink</span><br><span class="line">Set refundOrderIdSet = new HashSet();//用于退款支付订单数</span><br><span class="line"></span><br><span class="line">Long ts; //统计时间戳</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到太阳照常升起的博客，这篇文章是关于代码方面的内容，方便学习操作。&lt;/p&gt;
&lt;h1 id=&quot;redis连接代码范例&quot;&gt;&lt;a href=&quot;#redis连接代码范例&quot; class=&quot;headerlink&quot; title=&quot;redis连接代码范例&quot;&gt;&lt;/a&gt;redis连接代码</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件安装</title>
    <link href="http://example.com/2021/09/12/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2021/09/12/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</id>
    <published>2021-09-12T04:31:19.997Z</published>
    <updated>2021-09-12T13:24:36.785Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到太阳照常升起的博客，这篇文章是关于各项软件安装方面的步骤，方便学习操作。</p><h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p><strong>1.</strong>   <strong>去哪下</strong></p><p><strong>1.1.</strong> <strong>下载安装</strong></p><p><strong>1.1.1.</strong>    <strong>命令行工具：Git for windows</strong></p><p>下载地址：Git-2.23.0-64-bit.exe</p><p><a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a>          <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><strong>1.1.2.</strong>    <strong>Idea****插件</strong> </p><p>Idea自带，插件市场搜索最新版</p><p><strong>1.1.3.</strong>    <strong>GitHub****网站</strong></p><p><a href="http://www.github.com/">http://www.github.com</a></p><p><strong>1.2.</strong> <strong>安装****git</strong></p><p><strong>1.2.1.</strong>    <strong>出现安全警告，点击运行</strong></p><p><strong>1.2.2.</strong>    <strong>浏览协议，下一步</strong></p><p><strong>1.2.3.</strong>    <strong>安装目录，所需要磁盘空间大小，下一步</strong></p><p><strong>1.2.4.</strong>    <strong>Git Bash****需要安装的，其他默认即可，下一步</strong></p><p>   <img src="'./img/1631446110818.png'" alt="1631446110818"></p><p><strong>1.2.5.</strong>    <strong>开始菜单，下一步</strong></p><p>   <img src="./img/1631446137127.png" alt="1631446137127"></p><p><strong>1.2.6.</strong>    <strong>默认编辑器，下一步</strong></p><p>   <img src="D:\Blog\source_posts\img\1631446148375.png" alt="1631446148375"></p><p><strong>1.2.7.</strong>    <strong>选择Git命令的执行环境</strong></p><p>Ø  这里推荐选择第一个，就是单独用户Git自己的命令行窗口。</p><p>Ø  不推荐和windows的命令行窗口混用。</p><p>   <img src="D:\Blog\source_posts\img\1631446198249.png" alt="1631446198249"></p><p><strong>1.2.8.</strong>    <strong>HTTPS<strong><strong>传输：使用</strong></strong>SSL****传输协议</strong></p><p>   <img src="D:\Blog\source\img\1631446210652.png" alt="1631446210652"></p><p><strong>1.2.9.</strong>    <strong>在“<strong><strong>Configuring the line ending conversions</strong></strong>”选项中，</strong></p><p>第一个选项：如果是跨平台项目，在windows系统安装</p><p>第二个选项：如果是跨平台项目，在Unix系统安装</p><p>第三个选项：非跨平台项目</p><p> <img src="D:\Blog\source_posts\img\1631446223138.png" alt="1631446223138">  </p><p><strong>1.2.10.</strong>  <strong>在“terminal emulator”选项中，</strong></p><p>第一个选项：使用专用的Git窗口（<strong>推荐</strong>）</p><p>第二个选项：使用windows的cmd命令行窗口。</p><p>   <img src="./img/1631446236592.png" alt="1631446236592"></p><p><strong>1.2.11.</strong>  <strong>在“<strong><strong>Configuring extra</strong></strong>”选项中，默认开启文件缓存即可（推荐）</strong></p><p>   <img src="D:\Blog\source_posts\img\1631446301771.png" alt="1631446301771"></p><p><strong>1.2.12.</strong>  <strong>新功能，还不稳定，不勾选，开始安装</strong></p><p>   <img src="D:\Blog\source_posts\img\1631446312725.png" alt="1631446312725"></p><p><strong>1.2.13.</strong>  <strong>安装完成</strong></p><p>   <img src="D:\Blog\source_posts\img\1631446323178.png" alt="1631446323178"></p><p><strong>1.3.</strong> <strong>安装完成后，还需要最后一步设置，在命令行输入如下：</strong></p><p>安装完成后，在任意的文件目录下，右键都可以开打Git的命令行窗口。</p><p>Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p>git config –global user.name “用户名”</p><p>git config –global user.email “用户邮箱”</p><p>–global 表示全局属性，所有的git项目都会共用属性</p><p>   <img src="D:\Blog\source_posts\img\1631446393332.png" alt="1631446393332"></p><p>C:\Users\Administrator路径下的.gitconfig文件里面可以看到，如果不用命令，也可以直接在文件中进行设置。</p><p>   <img src="D:\Blog\source_posts\img\1631446412321.png" alt="1631446412321"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到太阳照常升起的博客，这篇文章是关于各项软件安装方面的步骤，方便学习操作。&lt;/p&gt;
&lt;h1 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/11/hello-world/"/>
    <id>http://example.com/2021/09/11/hello-world/</id>
    <published>2021-09-10T16:08:58.520Z</published>
    <updated>2021-09-10T16:08:58.520Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
